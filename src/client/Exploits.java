package client;

import graph.Graph;
import graph.Vertex;
import graphviz.GraphMaker;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

import random.RandomGraphGenerator;
import solver.IsomorphismSolver;
import topo.TopoNode;
import topo.TopologicalSort;

public class Exploits {

	public static void main(String[]  args){
		String troublemaker = " A -- B ; C -- A ; C -- D ; C -- E ; F -- B ; D -- B ; D -- F ; G -- C ; G -- B ; G -- E ;";
		Graph g = new Graph(troublemaker);
		Graph h = RandomGraphGenerator.generateRandomConnectedIsomorphism(g);
		
		Map<Vertex, Vertex> iso = IsomorphismSolver.findIsomorphism(g, h);
		Vertex pivot = g.getVertices().iterator().next();
		TopologicalSort pivotalSort = new TopologicalSort(pivot);
		GraphMaker.print(pivotalSort, "A PivotalSort");
		for (Vertex v : h.getVertices()){
			TopologicalSort otherSort = new TopologicalSort(v);
			if (otherSort.strata.get(1).verticies.size() == pivotalSort.strata.get(1).verticies.size() && otherSort.strata.get(2).verticies.size() == pivotalSort.strata.get(2).verticies.size() ){
				GraphMaker.print(otherSort, "A Comparison Sort");
				System.out.println("Pause");
				TopologicalSort newPivotal = new TopologicalSort(pivot);
				TopologicalSort newOther = new TopologicalSort(v);
			}
			if (pivotalSort.rankedEquals(otherSort)){
				Map<Integer, TopoNode> gMap = pivotalSort.getAllRankings();
				Map<Integer, TopoNode> hMap = otherSort.getAllRankings();
				Set<Integer> allKeys = new HashSet<Integer>();
				allKeys.addAll(gMap.keySet());
				allKeys.addAll(hMap.keySet());
				
				Map<Vertex, Vertex> isomorphism = new HashMap<Vertex, Vertex>();
				for (Integer i : allKeys){
					isomorphism.put(gMap.get(i).counterpart, hMap.get(i).counterpart);
				}
				if (isomorphism.size() != g.getVertices().size()){
					GraphMaker.print(otherSort, "PROBLEMSORT");
					System.err.println("THERE IS AN ISSUE HERE...");
					
				}
				
			}
		}
		
		
	}
}

